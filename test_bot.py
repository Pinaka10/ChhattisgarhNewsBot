#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test Script for Chhattisgarh News Bot
Tests all components and generates sample output
"""

import asyncio
import json
import logging
from datetime import datetime
import pytz

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class NewsBot Tester:
    def __init__(self):
        self.ist = pytz.timezone('Asia/Kolkata')
        
    def create_sample_news_data(self):
        """Create sample news data for testing"""
        sample_articles = [
            {
                "source": "patrika",
                "title": "рд░рд╛рдпрдкреБрд░ рдореЗрдВ рдбрд┐рдЬрд┐рдЯрд▓ рдЕрд░реЗрд╕реНрдЯ рдлреНрд░реЙрдб, рдмреБрдЬреБрд░реНрдЧ рдорд╣рд┐рд▓рд╛ рд╕реЗ 22 рд▓рд╛рдЦ рдХреА рдардЧреА",
                "body": "рд░рд╛рдпрдкреБрд░ рдореЗрдВ рдПрдХ рдмреБрдЬреБрд░реНрдЧ рдорд╣рд┐рд▓рд╛ рд╕реЗ рдбрд┐рдЬрд┐рдЯрд▓ рдЕрд░реЗрд╕реНрдЯ рдХреЗ рдирд╛рдо рдкрд░ 22 рд▓рд╛рдЦ рд░реБрдкрдП рдХреА рдардЧреА рд╣реБрдИ рд╣реИред рдардЧреЛрдВ рдиреЗ FD рддреБрдбрд╝рд╡рд╛рдХрд░ рдкреИрд╕реЗ рдЯреНрд░рд╛рдВрд╕рдлрд░ рдХрд░рд╡рд╛рдПред",
                "url": "https://www.patrika.com/raipur-news/digital-arrest-fraud-22-lakh-cheated",
                "timestamp": datetime.now(self.ist).isoformat(),
                "category": "crime",
                "importance": 3.0,
                "verified": True,
                "source_count": 3,
                "sources": ["patrika", "bhaskar", "ibc24"]
            },
            {
                "source": "bhaskar",
                "title": "рд╣рд╛рдИ рдХреЛрд░реНрдЯ рдХрд╛ рдлреИрд╕рд▓рд╛: рдмреА.рдИ. рдбрд┐рдЧреНрд░реАрдзрд╛рд░рдХреЛрдВ рдХреЛ PHE рднрд░реНрддреА рдореЗрдВ рдЖрд╡реЗрджрди рдХреА рдЕрдиреБрдорддрд┐",
                "body": "рдЫрддреНрддреАрд╕рдЧрдврд╝ рд╣рд╛рдИ рдХреЛрд░реНрдЯ рдиреЗ рдмреА.рдИ. рдбрд┐рдЧреНрд░реАрдзрд╛рд░рдХреЛрдВ рдХреЛ PHE рднрд░реНрддреА рдкрд░реАрдХреНрд╖рд╛ рдореЗрдВ рдЖрд╡реЗрджрди рдХреА рдЕрдиреБрдорддрд┐ рджреА рд╣реИред рд╣рд╛рдИ рдХреЛрд░реНрдЯ рдиреЗ рдЙрдирдХреЗ рдкрдХреНрд╖ рдореЗрдВ рджрд┐рдпрд╛ рдмрдбрд╝рд╛ рдлреИрд╕рд▓рд╛ред",
                "url": "https://www.bhaskar.com/local/chhattisgarh/raipur/news/high-court-decision-be-degree-holders",
                "timestamp": datetime.now(self.ist).isoformat(),
                "category": "politics",
                "importance": 2.5,
                "verified": True,
                "source_count": 3,
                "sources": ["bhaskar", "patrika", "news18"]
            },
            {
                "source": "news18",
                "title": "рдЧрдврд╝рд╡рд╛-рдЕрдВрдмрд┐рдХрд╛рдкреБрд░ рддрдХ 160 рдХрд┐рдореА рдлреЛрд░рд▓реЗрди рд╕рдбрд╝рдХ рдкрд░рд┐рдпреЛрдЬрдирд╛ рдХреА рдШреЛрд╖рдгрд╛",
                "body": "рдХреЗрдВрджреНрд░реАрдп рдордВрддреНрд░реА рдирд┐рддрд┐рди рдЧрдбрдХрд░реА рдиреЗ рдЧрдврд╝рд╡рд╛ рд╕реЗ рдЕрдВрдмрд┐рдХрд╛рдкреБрд░ рддрдХ 160 рдХрд┐рд▓реЛрдореАрдЯрд░ рдлреЛрд░рд▓реЗрди рд╕рдбрд╝рдХ рдмрдирд╛рдиреЗ рдХреА рдкрд░рд┐рдпреЛрдЬрдирд╛ рдХреА рдШреЛрд╖рдгрд╛ рдХреА рд╣реИред",
                "url": "https://hindi.news18.com/news/chhattisgarh/four-lane-road-project-announcement",
                "timestamp": datetime.now(self.ist).isoformat(),
                "category": "development",
                "importance": 2.0,
                "verified": True,
                "source_count": 2,
                "sources": ["news18", "patrika"]
            },
            {
                "source": "ibc24",
                "title": "рд░рддрдирдкреБрд░ рдореЗрдВ рдЧрдВрджреЗ рдкрд╛рдиреА рд╕реЗ рдбрд╛рдпрд░рд┐рдпрд╛ рдлреИрд▓рдиреЗ рдХрд╛ рдбрд░, рдкреНрд░рд╢рд╛рд╕рди рд╕рддрд░реНрдХ",
                "body": "рд░рддрдирдкреБрд░ рдореЗрдВ рдЧрдВрджреЗ рдкрд╛рдиреА рд╕реЗ рдбрд╛рдпрд░рд┐рдпрд╛ рдлреИрд▓рдиреЗ рдХрд╛ рдбрд░ рд╣реИред рдкреНрд░рд╢рд╛рд╕рди рд╕рддрд░реНрдХ рд╣реИ, рдкрд┐рдЫрд▓реЗ рд╕рд╛рд▓ 5 рдореМрддреЗрдВ рд╣реБрдИ рдереАрдВред",
                "url": "https://www.ibc24.in/chhattisgarh/ratanpur-diarrhea-outbreak-fear",
                "timestamp": datetime.now(self.ist).isoformat(),
                "category": "health",
                "importance": 1.8,
                "verified": True,
                "source_count": 2,
                "sources": ["ibc24", "bhaskar"]
            },
            {
                "source": "patrika",
                "title": "рдмреАрдЬрд╛рдкреБрд░ рдореЗрдВ 13 рдЗрдирд╛рдореА рдирдХреНрд╕рд▓рд┐рдпреЛрдВ рдиреЗ рдЖрддреНрдорд╕рдорд░реНрдкрдг рдХрд┐рдпрд╛",
                "body": "рдмреАрдЬрд╛рдкреБрд░ рдореЗрдВ 13 рдЗрдирд╛рдореА рдирдХреНрд╕рд▓рд┐рдпреЛрдВ рдиреЗ рдЖрддреНрдорд╕рдорд░реНрдкрдг рдХрд┐рдпрд╛ рд╣реИред рд╕реБрд░рдХреНрд╖рд╛ рдмрд▓реЛрдВ рдХреЗ рд▓рд┐рдП рдпрд╣ рдмрдбрд╝реА рд╕рдлрд▓рддрд╛ рд╣реИред",
                "url": "https://www.patrika.com/raipur-news/naxals-surrender-bijapur",
                "timestamp": datetime.now(self.ist).isoformat(),
                "category": "security",
                "importance": 2.3,
                "verified": True,
                "source_count": 3,
                "sources": ["patrika", "ibc24", "news18"]
            },
            {
                "source": "bhaskar",
                "title": "рдЬрдЧрджрд▓рдкреБрд░-рд░рд╛рдпрдкреБрд░ рд╣рд╛рдЗрд╡реЗ рдкрд░ рднреАрд╖рдг рд╣рд╛рджрд╕рд╛, 3 рдХреА рдореМрдд",
                "body": "рдЬрдЧрджрд▓рдкреБрд░-рд░рд╛рдпрдкреБрд░ рд╣рд╛рдЗрд╡реЗ рдкрд░ рднреАрд╖рдг рд╣рд╛рджрд╕рд╛ рд╣реБрдЖ рд╣реИред 3 рдХреА рдореМрдд рд╣реБрдИ рд╣реИ, 6 рдШрд╛рдпрд▓ рд╣реИрдВ рдЬреЛ рдЕрд╕реНрдкрддрд╛рд▓ рдореЗрдВ рднрд░реНрддреА рд╣реИрдВред",
                "url": "https://www.bhaskar.com/local/chhattisgarh/accident-jagdalpur-raipur-highway",
                "timestamp": datetime.now(self.ist).isoformat(),
                "category": "accident",
                "importance": 2.8,
                "verified": True,
                "source_count": 2,
                "sources": ["bhaskar", "ibc24"]
            },
            {
                "source": "news18",
                "title": "рд╕реАрдмреАрдЖрдИ рдХреА рдХрд╛рд░реНрд░рд╡рд╛рдИ: 88 рд▓рд╛рдЦ рдХреА рд░рд┐рд╢реНрд╡рдд рдорд╛рдорд▓реЗ рдореЗрдВ 3 рдбреЙрдХреНрдЯрд░ рдЧрд┐рд░рдлреНрддрд╛рд░",
                "body": "88 рд▓рд╛рдЦ рдХреА рд░рд┐рд╢реНрд╡рдд рд▓реЗрдХрд░ рдореЗрдбрд┐рдХрд▓ рдХреЙрд▓реЗрдЬ рдХреА рдорд╛рдиреНрдпрддрд╛ рджрд┐рд▓рд╛рдиреЗ рдХреЗ рдорд╛рдорд▓реЗ рдореЗрдВ рд╕реАрдмреАрдЖрдИ рдиреЗ 3 рдбреЙрдХреНрдЯрд░реЛрдВ рдХреЛ рдЧрд┐рд░рдлреНрддрд╛рд░ рдХрд┐рдпрд╛ рд╣реИред",
                "url": "https://hindi.news18.com/news/chhattisgarh/cbi-action-doctors-arrested-bribery",
                "timestamp": datetime.now(self.ist).isoformat(),
                "category": "crime",
                "importance": 2.7,
                "verified": True,
                "source_count": 3,
                "sources": ["news18", "patrika", "bhaskar"]
            },
            {
                "source": "ibc24",
                "title": "рдЙрддреНрддрд░реА рдЫрддреНрддреАрд╕рдЧрдврд╝ рдореЗрдВ рднрд╛рд░реА рдмрд╛рд░рд┐рд╢ рдХреА рд╕рдВрднрд╛рд╡рдирд╛, рдСрд░реЗрдВрдЬ рдЕрд▓рд░реНрдЯ рдЬрд╛рд░реА",
                "body": "рдЙрддреНрддрд░реА рдЫрддреНрддреАрд╕рдЧрдврд╝ рдореЗрдВ рднрд╛рд░реА рдмрд╛рд░рд┐рд╢ рдХреА рд╕рдВрднрд╛рд╡рдирд╛ рд╣реИред рдореМрд╕рдо рд╡рд┐рднрд╛рдЧ рдиреЗ рдСрд░реЗрдВрдЬ рдФрд░ рдпреЗрд▓реЛ рдЕрд▓рд░реНрдЯ рдЬрд╛рд░реА рдХрд┐рдпрд╛ рд╣реИред",
                "url": "https://www.ibc24.in/chhattisgarh/heavy-rain-forecast-orange-alert",
                "timestamp": datetime.now(self.ist).isoformat(),
                "category": "weather",
                "importance": 1.5,
                "verified": True,
                "source_count": 2,
                "sources": ["ibc24", "patrika"]
            }
        ]
        
        return sample_articles

    def format_bulletin(self, articles):
        """Format bulletin in the exact required format"""
        current_date = datetime.now(self.ist)
        date_str = current_date.strftime("%d рдЬреБрд▓рд╛рдИ %Y")
        
        # Emoji mapping
        emoji_map = {
            "crime": "ЁЯЪи",
            "politics": "ЁЯУМ", 
            "development": "ЁЯЫгя╕П",
            "accident": "ЁЯЪЧ",
            "health": "ЁЯТз",
            "security": "ЁЯкЦ",
            "weather": "ЁЯМзя╕П",
            "investigation": "ЁЯХ╡я╕П"
        }
        
        # Topic extraction patterns
        topic_patterns = {
            "рдбрд┐рдЬрд┐рдЯрд▓ рдЕрд░реЗрд╕реНрдЯ": "рдбрд┐рдЬрд┐рдЯрд▓ рдЕрд░реЗрд╕реНрдЯ рдлреНрд░реЙрдб",
            "рд╣рд╛рдИ рдХреЛрд░реНрдЯ": "рд╣рд╛рдИ рдХреЛрд░реНрдЯ рдХрд╛ рдлреИрд╕рд▓рд╛",
            "рдлреЛрд░рд▓реЗрди": "рдлреЛрд░рд▓реЗрди рд╕рдбрд╝рдХ рдкрд░рд┐рдпреЛрдЬрдирд╛",
            "рдбрд╛рдпрд░рд┐рдпрд╛": "рдбрд╛рдпрд░рд┐рдпрд╛ рдХрд╛ рдЦрддрд░рд╛",
            "рдирдХреНрд╕рд▓": "рдирдХреНрд╕рд▓ рд╡рд┐рд░реЛрдзреА рдЕрднрд┐рдпрд╛рди",
            "рд╣рд╛рджрд╕рд╛": "рд╕рдбрд╝рдХ рд╣рд╛рджрд╕рд╛",
            "рд╕реАрдмреАрдЖрдИ": "рд╕реАрдмреАрдЖрдИ рдХреА рдХрд╛рд░реНрд░рд╡рд╛рдИ",
            "рдмрд╛рд░рд┐рд╢": "рдореМрд╕рдо рдЕрдкрдбреЗрдЯ"
        }
        
        bulletin = f"ЁЯМЯ *рдЫрддреНрддреАрд╕рдЧрдврд╝ рдХреА рддрд╛рдЬрд╝рд╛ рдЦрдмрд░реЗрдВ тАУ {date_str}*\n"
        
        for article in articles[:8]:  # Top 8 articles
            title = article['title']
            body = article['body']
            category = article.get('category', 'general')
            
            # Get emoji
            if "рд╕реАрдмреАрдЖрдИ" in title:
                emoji = "ЁЯХ╡я╕П"
            elif "рд╣рд╛рдИ рдХреЛрд░реНрдЯ" in title:
                emoji = "ЁЯУМ"
            elif "рдбрд┐рдЬрд┐рдЯрд▓" in title or "рдардЧреА" in title:
                emoji = "ЁЯЪи"
            elif "рд╕рдбрд╝рдХ" in title or "рдлреЛрд░рд▓реЗрди" in title:
                emoji = "ЁЯЫгя╕П"
            elif "рдбрд╛рдпрд░рд┐рдпрд╛" in title or "рдкрд╛рдиреА" in title:
                emoji = "ЁЯТз"
            elif "рдирдХреНрд╕рд▓" in title:
                emoji = "ЁЯкЦ"
            elif "рд╣рд╛рджрд╕рд╛" in title or "рджреБрд░реНрдШрдЯрдирд╛" in title:
                emoji = "ЁЯЪЧ"
            elif "рдмрд╛рд░рд┐рд╢" in title or "рдореМрд╕рдо" in title:
                emoji = "ЁЯМзя╕П"
            else:
                emoji = emoji_map.get(category, "ЁЯУ░")
            
            # Extract topic
            topic = None
            for keyword, topic_name in topic_patterns.items():
                if keyword in title:
                    topic = topic_name
                    break
            
            if not topic:
                # Use first few words as topic
                words = title.split()[:4]
                topic = ' '.join(words)
            
            # Create summary (first sentence of body)
            summary_sentences = body.split('ред')
            summary = summary_sentences[0].strip()
            if len(summary) > 100:
                summary = summary[:97] + "..."
            
            headline = f"{emoji} *{topic}*: {summary}ред"
            bulletin += f"{headline}\n"
        
        bulletin += "т╕╗"
        return bulletin

    def format_for_tts(self, articles):
        """Format text for TTS with natural pronunciation"""
        current_date = datetime.now(self.ist)
        date_str = current_date.strftime("%d рдЬреБрд▓рд╛рдИ %Y")
        
        tts_text = f"рдЫрддреНрддреАрд╕рдЧрдврд╝ рдиреНрдпреВрдЬрд╝, рдЖрдкрдХрд╛ рдмреЙрдЯ рдкреНрд░рд╕реНрддреБрдд рдХрд░рддрд╛ рд╣реИ {date_str} рдХреА рдореБрдЦреНрдп рдЦрдмрд░реЗрдВред\n\n"
        
        for article in articles[:8]:
            title = article['title']
            body = article['body']
            
            # Clean for natural pronunciation
            clean_text = f"{title}ред {body.split('ред')[0]}ред"
            
            # Number replacements
            clean_text = clean_text.replace('22 рд▓рд╛рдЦ', 'рдмрд╛рдИрд╕ рд▓рд╛рдЦ')
            clean_text = clean_text.replace('88 рд▓рд╛рдЦ', 'рдЕрдЯреНрдард╛рд╕реА рд▓рд╛рдЦ')
            clean_text = clean_text.replace('160 рдХрд┐рдореА', 'рдПрдХ рд╕реМ рд╕рд╛рда рдХрд┐рд▓реЛрдореАрдЯрд░')
            clean_text = clean_text.replace('13 рдЗрдирд╛рдореА', 'рддреЗрд░рд╣ рдЗрдирд╛рдореА')
            clean_text = clean_text.replace('3 рдХреА рдореМрдд', 'рддреАрди рдХреА рдореМрдд')
            clean_text = clean_text.replace('6 рдШрд╛рдпрд▓', 'рдЫрд╣ рдШрд╛рдпрд▓')
            clean_text = clean_text.replace('3 рдбреЙрдХреНрдЯрд░', 'рддреАрди рдбреЙрдХреНрдЯрд░')
            clean_text = clean_text.replace('5 рдореМрддреЗрдВ', 'рдкрд╛рдВрдЪ рдореМрддреЗрдВ')
            
            # Abbreviation replacements
            clean_text = clean_text.replace('рд╕реАрдмреАрдЖрдИ', 'рд╕реА рдмреА рдЖрдИ')
            clean_text = clean_text.replace('рдмреА.рдИ.', 'рдмреА рдИ')
            clean_text = clean_text.replace('рдкреАрдПрдЪрдИ', 'рдкреА рдПрдЪ рдИ')
            clean_text = clean_text.replace('рдПрдлрдбреА', 'рдПрдл рдбреА')
            
            tts_text += f"{clean_text}\n\n"
        
        tts_text += "рдпрд╣ рдереА рдЖрдЬ рдХреА рдореБрдЦреНрдп рдЦрдмрд░реЗрдВред рдзрдиреНрдпрд╡рд╛рджред"
        return tts_text

    def create_json_storage(self, articles):
        """Create JSON structure for Google Drive storage"""
        today = datetime.now(self.ist).date()
        
        json_data = {
            "date": today.strftime('%Y-%m-%d'),
            "generated_at": datetime.now(self.ist).isoformat(),
            "total_articles": len(articles),
            "sources_used": list(set(article['source'] for article in articles)),
            "stories": []
        }
        
        for i, article in enumerate(articles, 1):
            story = {
                "id": i,
                "source": article['source'],
                "title": article['title'],
                "body": article['body'],
                "url": article['url'],
                "timestamp": article['timestamp'],
                "summary": article['body'].split('ред')[0] + 'ред',
                "category": article['category'],
                "importance": article['importance'],
                "verified": article['verified'],
                "source_count": article['source_count'],
                "verification_sources": article['sources'],
                "url_status": "active"
            }
            json_data['stories'].append(story)
        
        return json_data

    def run_complete_test(self):
        """Run complete test of the news bot"""
        logger.info("ЁЯЪА Starting Complete Chhattisgarh News Bot Test")
        logger.info("=" * 60)
        
        # Step 1: Create sample data
        logger.info("ЁЯУ░ Step 1: Creating sample news data...")
        articles = self.create_sample_news_data()
        logger.info(f"тЬЕ Created {len(articles)} sample articles")
        
        # Step 2: Format bulletin
        logger.info("\nЁЯУ▒ Step 2: Formatting WhatsApp/Telegram bulletin...")
        bulletin = self.format_bulletin(articles)
        logger.info("тЬЕ Bulletin formatted successfully")
        
        # Step 3: Format for TTS
        logger.info("\nЁЯО╡ Step 3: Formatting text for TTS...")
        tts_text = self.format_for_tts(articles)
        logger.info("тЬЕ TTS text formatted successfully")
        
        # Step 4: Create JSON storage
        logger.info("\nЁЯТ╛ Step 4: Creating JSON storage structure...")
        json_data = self.create_json_storage(articles)
        logger.info("тЬЕ JSON structure created successfully")
        
        # Step 5: Display results
        logger.info("\n" + "=" * 60)
        logger.info("ЁЯУК TEST RESULTS")
        logger.info("=" * 60)
        
        print("\nЁЯУ▒ WHATSAPP/TELEGRAM BULLETIN:")
        print("-" * 40)
        print(bulletin)
        
        print("\nЁЯО╡ TTS-OPTIMIZED TEXT:")
        print("-" * 40)
        print(tts_text)
        
        print("\nЁЯТ╛ JSON STORAGE SAMPLE:")
        print("-" * 40)
        print(json.dumps(json_data, ensure_ascii=False, indent=2)[:500] + "...")
        
        # Step 6: Save files
        today = datetime.now(self.ist).date()
        
        # Save bulletin
        with open(f'sample_bulletin_{today}.txt', 'w', encoding='utf-8') as f:
            f.write(bulletin)
        
        # Save TTS text
        with open(f'sample_tts_{today}.txt', 'w', encoding='utf-8') as f:
            f.write(tts_text)
        
        # Save JSON
        with open(f'sample_news_{today}.json', 'w', encoding='utf-8') as f:
            json.dump(json_data, f, ensure_ascii=False, indent=2)
        
        logger.info(f"\nтЬЕ Sample files saved:")
        logger.info(f"   - sample_bulletin_{today}.txt")
        logger.info(f"   - sample_tts_{today}.txt")
        logger.info(f"   - sample_news_{today}.json")
        
        logger.info("\nЁЯОЙ COMPLETE TEST SUCCESSFUL!")
        logger.info("ЁЯЪА Bot is ready for deployment!")
        
        return {
            'bulletin': bulletin,
            'tts_text': tts_text,
            'json_data': json_data,
            'articles_count': len(articles)
        }

if __name__ == "__main__":
    tester = NewsBotTester()
    results = tester.run_complete_test()
    
    print(f"\nЁЯОп SUMMARY:")
    print(f"   Articles processed: {results['articles_count']}")
    print(f"   Bulletin length: {len(results['bulletin'])} characters")
    print(f"   TTS text length: {len(results['tts_text'])} characters")
    print(f"   JSON stories: {len(results['json_data']['stories'])}")
    
    print(f"\nтЬЕ All systems operational!")
    print(f"ЁЯУЕ Test completed: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")